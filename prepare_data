#!/usr/bin/env python

import os, sys
from dataprep.data_preparator import data_preparator
from utils.myprint import myprint

"""
Main function of the code
"""
def main ():
    config = opt_parser()
    debug = config.debug
    matchday = config.matchday
    noplayers = config.noplayers
    nofixtures = config.nofixtures
    noperf = config.noperf
    mp = myprint ("prepare_data", debug)
    mp.banner ( mp.bold + "Data Preparation" + mp.endc + mp.color_info + "\n Downloading data for a given matchday\nData is stored in the data/ folder")
    mp.print_info ("MATCHDAY %d: data preparation" % matchday)

    # main class for prepare the download
    dp = data_preparator (
        matchday = matchday,
        debug = debug
    )
 
    # getting statistics for all the players
    mp.print_info ("Reading player stats..")
    if noplayers:
        mp.print_warning ("   skipped")
    else:
        dp.read_player_stats()

    mp.print_info ("Reading match fixtures..")
    if nofixtures:
        mp.print_warning ("   skipped")
    else:
        dp.read_fixtures()

    mp.print_info ("Reading team performances..")
    if noperf:
        mp.print_warning ("   skipped")
    else:
        dp.read_perf()

        
def opt_parser ():
    from optparse import OptionParser
    parser = OptionParser()
    parser.add_option("-d","--debug", dest="debug", action="store_true", help="Switch on the debug", default = False)
    parser.add_option("-m","--matchday", dest="matchday", help="Matchday of the downloaded dataset", default = 1)
    parser.add_option("--noplayers", dest="noplayers", action="store_true", help="Skip reading the players for the matchday", default = False)
    parser.add_option("--nofixtures", dest="nofixtures", action="store_true", help="Skip reading the fixtures for the matchday", default = False)
    parser.add_option("--noperf", dest="noperf", action="store_true", help="Skip reading the team performances", default = False)
    (config, sys.argv[1:]) = parser.parse_args(sys.argv[1:])
    return config

if __name__ == "__main__":
    main ()
